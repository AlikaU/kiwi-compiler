
ERROR: 
Parsing begins!
ERROR: 


ERROR: class 
ERROR: Utility 
ERROR: { 
ERROR: int 
ERROR: var1 
ERROR: [ 
ERROR: 4 
ERROR: ] 
ERROR: [ 
ERROR: 5 
ERROR: ] 
ERROR: [ 
ERROR: 7 
ERROR: ] 
ERROR: [ 
ERROR: 8 
ERROR: ] 
ERROR: [ 
ERROR: 9 
ERROR: ] 
ERROR: [ 
ERROR: 1 
ERROR: ] 
ERROR: [ 
ERROR: 0 
ERROR: ] 
ERROR: ; 
ERROR: float 
ERROR: var2 
ERROR: ; 
ERROR: int 
ERROR: findMax 
ERROR: ( 
ERROR: int 
ERROR: array 
ERROR: [ 
ERROR: 100 
ERROR: ] 
ERROR: ) 
ERROR: { 
ERROR: int 
ERROR: maxValue 
ERROR: ; 
ERROR: int 
ERROR: idx 
ERROR: ; 
ERROR: maxValue 
ERROR: = 
ERROR: array 
ERROR: [ 
ERROR: 100 
ERROR: ] 
ERROR: ; 
ERROR: for 
ERROR: ( 
ERROR: int 
ERROR: idx 
ERROR: = 
ERROR: 99 
ERROR: ; 
ERROR: idx 
ERROR: > 
ERROR: 0 
ERROR: ; 
ERROR: idx 
ERROR: = 
ERROR: idx 
ERROR: - 
ERROR: 1 
ERROR: ) 
ERROR: { 
ERROR: if 
ERROR: ( 
ERROR: array 
ERROR: [ 
ERROR: idx 
ERROR: ] 
ERROR: > 
ERROR: maxValue 
ERROR: ) 
ERROR: then 
ERROR: { 
ERROR: maxValue 
ERROR: = 
ERROR: array 
ERROR: [ 
ERROR: idx 
ERROR: ] 
ERROR: ; 
ERROR: } 
ERROR: else 
ERROR: { 
ERROR: } 
ERROR: ; 
ERROR: } 
ERROR: ; 
ERROR: return 
ERROR: ( 
ERROR: maxValue 
ERROR: ) 
ERROR: ; 
ERROR: } 
ERROR: ; 
ERROR: int 
ERROR: findMin 
ERROR: ( 
ERROR: int 
ERROR: array 
ERROR: [ 
ERROR: 100 
ERROR: ] 
ERROR: ) 
ERROR: { 
ERROR: int 
ERROR: minValue 
ERROR: ; 
ERROR: int 
ERROR: idx 
ERROR: ; 
ERROR: minValue 
ERROR: = 
ERROR: array 
ERROR: [ 
ERROR: 100 
ERROR: ] 
ERROR: ; 
ERROR: for 
ERROR: ( 
ERROR: int 
ERROR: idx 
ERROR: = 
ERROR: 1 
ERROR: ; 
ERROR: idx 
ERROR: <= 
ERROR: 99 
ERROR: ; 
ERROR: idx 
ERROR: = 
ERROR: ( 
ERROR: idx 
ERROR: ) 
ERROR: + 
ERROR: 1 
ERROR: ) 
ERROR: { 
ERROR: if 
ERROR: ( 
ERROR: array 
ERROR: [ 
ERROR: idx 
ERROR: ] 
ERROR: < 
ERROR: maxValue 
ERROR: ) 
ERROR: then 
ERROR: { 
ERROR: maxValue 
ERROR: = 
ERROR: array 
ERROR: [ 
ERROR: idx 
ERROR: ] 
ERROR: ; 
ERROR: } 
ERROR: else 
ERROR: { 
ERROR: } 
ERROR: ; 
ERROR: } 
ERROR: ; 
ERROR: return 
ERROR: ( 
ERROR: minValue 
ERROR: ) 
ERROR: ; 
ERROR: } 
ERROR: ; 
ERROR: } 
ERROR: ; 
ERROR: program 
ERROR: { 
ERROR: int 
ERROR: sample 
ERROR: [ 
ERROR: 100 
ERROR: ] 
ERROR: ; 
ERROR: int 
ERROR: idx 
ERROR: ; 
ERROR: int 
ERROR: maxValue 
ERROR: ; 
ERROR: int 
ERROR: minValue 
ERROR: ; 
ERROR: Utility 
ERROR: utility 
ERROR: ; 
ERROR: Utility 
ERROR: arrayUtility 
ERROR: [ 
ERROR: 2 
ERROR: ] 
ERROR: [ 
ERROR: 3 
ERROR: ] 
ERROR: [ 
ERROR: 6 
ERROR: ] 
ERROR: [ 
ERROR: 7 
ERROR: ] 
ERROR: ; 
ERROR: for 
ERROR: ( 
ERROR: int 
ERROR: t 
ERROR: = 
ERROR: 0 
ERROR: ; 
ERROR: t 
ERROR: <= 
ERROR: 100 
ERROR: ; 
ERROR: t 
ERROR: = 
ERROR: t 
ERROR: + 
ERROR: 1 
ERROR: ) 
ERROR: { 
ERROR: get 
ERROR: ( 
ERROR: sample 
ERROR: [ 
ERROR: t 
ERROR: ] 
ERROR: ) 
ERROR: ; 
ERROR: sample 
ERROR: [ 
ERROR: t 
ERROR: ] 
ERROR: = 
ERROR: ( 
ERROR: sample 
ERROR: [ 
ERROR: t 
ERROR: ] 
ERROR: * 
ERROR: randomize 
ERROR: ( 
ERROR: ) 
ERROR: ) 
ERROR: ; 
ERROR: } 
ERROR: ; 
ERROR: maxValue 
ERROR: = 
ERROR: utility 
ERROR: . 
ERROR: findMax 
ERROR: ( 
ERROR: sample 
ERROR: ) 
ERROR: ; 
ERROR: minValue 
ERROR: = 
ERROR: utility 
ERROR: . 
ERROR: findMin 
ERROR: ( 
ERROR: sample 
ERROR: ) 
ERROR: ; 
ERROR: utility 
ERROR: . 
ERROR: var1 
ERROR: [ 
ERROR: 4 
ERROR: ] 
ERROR: [ 
ERROR: 1 
ERROR: ] 
ERROR: [ 
ERROR: 0 
ERROR: ] 
ERROR: [ 
ERROR: 0 
ERROR: ] 
ERROR: [ 
ERROR: 0 
ERROR: ] 
ERROR: [ 
ERROR: 0 
ERROR: ] 
ERROR: [ 
ERROR: 0 
ERROR: ] 
ERROR: = 
ERROR: 10 
ERROR: ; 
ERROR: arrayUtility 
ERROR: [ 
ERROR: 1 
ERROR: ] 
ERROR: [ 
ERROR: 1 
ERROR: ] 
ERROR: [ 
ERROR: 1 
ERROR: ] 
ERROR: [ 
ERROR: 1 
ERROR: ] 
ERROR: . 
ERROR: var1 
ERROR: [ 
ERROR: 4 
ERROR: ] 
ERROR: [ 
ERROR: 1 
ERROR: ] 
ERROR: [ 
ERROR: 0 
ERROR: ] 
ERROR: [ 
ERROR: 0 
ERROR: ] 
ERROR: [ 
ERROR: 0 
ERROR: ] 
ERROR: [ 
ERROR: 0 
ERROR: ] 
ERROR: [ 
ERROR: 0 
ERROR: ] 
ERROR: = 
ERROR: 2 
ERROR: ; 
ERROR: put 
ERROR: ( 
ERROR: maxValue 
ERROR: ) 
ERROR: ; 
ERROR: put 
ERROR: ( 
ERROR: minValue 
ERROR: ) 
ERROR: ; 
ERROR: } 
ERROR: ; 
ERROR: float 
ERROR: randomize 
ERROR: ( 
ERROR: ) 
ERROR: { 
ERROR: float 
ERROR: value 
ERROR: ; 
ERROR: value 
ERROR: = 
ERROR: 100 
ERROR: * 
ERROR: ( 
ERROR: 2 
ERROR: + 
ERROR: 3.0 
ERROR: / 
ERROR: 7.0006 
ERROR: ) 
ERROR: ; 
ERROR: value 
ERROR: = 
ERROR: 1.05 
ERROR: + 
ERROR: ( 
ERROR: ( 
ERROR: 2.04 
ERROR: * 
ERROR: 2.47 
ERROR: ) 
ERROR: - 
ERROR: 3.0 
ERROR: ) 
ERROR: + 
ERROR: 7.0006 
ERROR: ; 
ERROR: return 
ERROR: ( 
ERROR: value 
ERROR: ) 
ERROR: ; 
ERROR: } 
ERROR: ; 